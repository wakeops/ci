name: Auto Tag

permissions:
  contents: write

jobs:
  auto-tag:
    name: Auto Tag Repository
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.tag.outputs.new_tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # use full history to find previous tags

      - name: Determine next tag
        id: tag
        run: |
          # Get the latest tag (default to v0.0.1 if none)
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.1")

          # Extract version numbers
          base="${last_tag#v}"
          major=$(echo "$base" | cut -d. -f1)
          minor=$(echo "$base" | cut -d. -f2)
          patch=$(echo "$base" | cut -d. -f3)

          # Increment patch by default
          new_tag="v${major}.${minor}.$((patch + 1))"

          echo "Creating new tag: $new_tag"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -a "$new_tag" -m "Auto tag generated by workflow"
          git push origin "$new_tag"

          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT


    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to ${{ vars.REGISTRY_HOST }}
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY_HOST }}
          username: ${{ vars.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Docker meta (tags/labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ vars.REGISTRY_HOST }}/${{ vars.REGISTRY_NAMESPACE }}/${{ inputs.image_name }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=tag

      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
